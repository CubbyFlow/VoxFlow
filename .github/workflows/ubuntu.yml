name: Ubuntu

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ubuntu:
    env:
      build_type: "Release"
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk"
      vulkan_version: "1.3.204.1"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Ubuntu 20.04 + GCC-10"
            os: ubuntu-20.04
            compiler: gcc
            version: "10"
          - name: "Ubuntu 20.04 + GCC-11"
            os: ubuntu-20.04
            compiler: gcc
            version: "11"
          - name: "Ubuntu 20.04 + Clang-11"
            os: ubuntu-20.04
            compiler: clang
            version: "11"
          - name: "Ubuntu 20.04 + Clang-12"
            os: ubuntu-20.04
            compiler: clang
            version: "12"

    runs-on: ${{matrix.os}}
    name: ${{matrix.name}}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Install Dependency
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade
        sudo apt-get install xorg-dev build-essential libgl-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev python3-setuptools
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install cmake gcc-${{ matrix.version }} g++-${{ matrix.version }}
        else
          sudo apt-get install cmake clang-${{ matrix.version }} clang++-${{ matrix.version }}
        fi
    - name: Configure Compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
        else
          echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
        fi
    - name: Configure Vulkan SDK using the downloaded spec
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: ${{ env.vulkan_version }}
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true
    - name: Execute bootstrap script
      shell: bash
      run: |
        python3 bootstrap.py
    - name: Configure Build
      run: |
        mkdir build
        cd build && cmake .. -DCMAKE_BUILD_TYPE=${{env.build_type}}
    - name: Build
      run: cd build && make
    - name: Run Unit Test
      run: /home/runner/work/VoxFlow/VoxFlow/build/bin/UnitTests